{"version":3,"sources":["img/bg.png","component/LandingSplash/LandingSplash.component.js","component/Header/Nav/Nav.component.js","component/Header/Header.component.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LandingSplash","react_default","a","createElement","className","src","IntroImage","alt","Component","Nav","render","React","Header","Nav_Nav_component","App","Header_Header_component","LandingSplash_LandingSplash_component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iTC6BzBC,mLApBP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAYC,IAAI,2BAE9BN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAd,OAAyCH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uBAAd,UAA2CH,EAAAC,EAAAC,cAAA,kBACpFF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBACVH,EAAAC,EAAAC,cAAA,6CACAF,EAAAC,EAAAC,cAAA,2CACAF,EAAAC,EAAAC,cAAA,2CACAF,EAAAC,EAAAC,cAAA,uDACCF,EAAAC,EAAAC,cAAA,oBAdGK,aCcbC,0NAdXC,OAAS,WACL,OAAOT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,QACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,aACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,cACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,WACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,2CAREO,IAAMH,YCYTI,6MARXF,OAAS,WACL,OAAOT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAClBH,EAAAC,EAAAC,cAACU,EAAD,qCAHSF,IAAMH,WCaZM,mLAVP,OACIb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACa,EAAD,cALER,aCAZS,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KCzEjEC,IAAS9B,OAAOT,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,QAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAAwB,OAAMH,QAAN,sBAEP5B,GAiDV,SAAiCO,GAE/ByB,MAAMzB,GACHI,KAAK,SAAAsB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C7B,UAAUC,cAAc6B,MAAM3B,KAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,KAAK,WAC7BT,OAAOC,SAASqC,aAKpBlC,EAAgBC,KAGnBc,MAAM,WACLF,QAAQC,IACN,mEArEAqB,CAAwBlC,GAIxBC,UAAUC,cAAc6B,MAAM3B,KAAK,WACjCQ,QAAQC,IACN,+GAMJd,EAAgBC,MCzCxBmC","file":"static/js/main.28a8ecef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.d39992f0.png\";","import React, { Component } from 'react';\n\n/** Local CSS */\nimport './LandingSplash.component.css';\nimport IntroImage from '../../img/bg.png';\n\n\nclass LandingSplash extends Component {\n    render() {\n        return (\n            <div className=\"landing-splash-container\">\n                <div className=\"intro-image\">\n                    <img src={IntroImage} alt=\"Yao's name in Chinese\"></img>\n                </div>\n                <div className=\"intro-text\">\n                    <h1 className=\"intro-text-title\">Yao</h1><h4 className=\"intro-text-subtitle\"> /you/ <i>noun</i></h4>\n                    <ol className=\"intro-text-content\">\n                        <li>sunny, having cloudless shines.</li> \n                        <li>intelligent and quick-witted.</li>\n                        <li>rhymes with KAPOW, WOW, meow.</li>  \n                        <li>given name from my considering parents. </li> \n                    </ol><br />\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default LandingSplash;\n","import React from 'react';\n\n/** Local CSS */\nimport './Nav.component.css';\n\n\nclass Nav extends React.Component {\n    render = () => {\n        return <div className='nav-container'>\n            <div className='nav-flex-container'>\n                <div className='nav-item'>Home</div>\n                <div className='nav-item'>Education</div>\n                <div className='nav-item'>Experience</div>\n                <div className='nav-item'>Passion</div>\n                <div className='nav-item'>Contact</div>\n            </div>\n        </div>\n    }\n}\n\n\nexport default Nav;","import React from 'react';\n\n/** Local CSS */\nimport './Header.component.css';\n\n/** Other Custom Component */\nimport Nav from './Nav/Nav.component';\n\n\nclass Header extends React.Component {\n    render = () => {\n        return <div className='header-container'>\n            <Nav />\n        </div>\n    }\n}\n\n\nexport default Header;","import React, { Component } from 'react';\n\n/** Local CSS */\nimport './App.css';\n\n/** Other Custom Component */\nimport LandingSplash from './component/LandingSplash/LandingSplash.component';\nimport Header from './component/Header/Header.component';\n\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"app-root-container\">\n                <Header />\n                <LandingSplash />\n            </div>\n        );\n    }\n}\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}